name: CI pipeline

permissions:
  contents: write
  workflows: write

# Quando a pipeline vai executar. o ON √© um trigger
on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]

# Jobs que a pipeline vai fazer
jobs:
  test:                           # nome do Job
    runs-on: ubuntu-latest        # OS da VM

    # Passos que ser√£o executados nesse Job
    steps:
      # Passo 1: Baixa o c√≥digo da branch
      -  name: Checkout code
         uses: actions/checkout@v4
      
      # Passo 2: Instala o Node.js na VM
      -  name: Setup Node.js
         uses: actions/setup-node@v4
         with:
          node-version: '18'
          cache: 'npm'
        
      # Passo 3: Instala as deps do projeto
      -  name: Install deps
         run: npm ci

      # Passo 4: Executa testes
      -  name: Run tests
         run: npm test
  
  # Job 2: Deploy-Staging (s√≥ roda se a condi√ß√£o do if bater)
  deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push' # s√≥ faz o deploy se for push na branch develop
    environment: staging

    steps:
      - name: Deploy to staging
        env:
          RENDER_STAGING_HOOK_URL: ${{ secrets.RENDER_STAGING_HOOK_URL }}
        run: |
          echo "Deploying to STAGING environment..."
          curl -X POST $RENDER_STAGING_HOOK_URL
          echo "‚úÖ Staging deploy initiated"

        # Espera o deploy completar para seguir com o pr√≥ximo passo
      - name: Wait for deployment to complete
        run: |
          echo "Waiting for deployment"
          sleep 90
        
        # Checagem da aplica√ß√£o
      - name: Health check staging
        id: staging_health_check
        env:
          STAGING_URL: ${{ secrets.STAGING_URL || 'https://e-commerce-api-staging.onrender.com' }}
        run: |
          echo "Checking aplication's health"
          
          for i in {1..3}; do
            echo "attempt $i/3..."
            if curl -f -s --max-time 30 "$STAGING_URL/api/v1/health" || curl -f -s --max-time 30 "$STAGING_URL/"; then
              echo "Staging health check passed"
              exit 0
            fi
            sleep 10
          done
          
          echo "Health check failed after 3 attempts"
          exit 1
      
      # Baixa o c√≥digo pra VM apenas se o health check falhar
      - name: Checkout code for rollback
        if: failure() && steps.staging_health_check.outcome == 'failure'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Rollback se der falha no passo anterior
      - name: Rollback staging
        if: failure() && steps.staging_health_check.outcome == 'failure'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RENDER_STAGING_HOOK_URL: ${{ secrets.RENDER_STAGING_HOOK_URL }}
        run: |
          echo "Health check failed, initializing rollback"

          git config --global user.email "rdgoliv18@gmail.com"
          git config --global user.name "rodoliv98"

          git revert --no-edit ${{ github.sha }}
          git push origin develop

          sleep 20

          echo "Starting rollback deploy"
          curl -X POST $RENDER_STAGING_HOOK_URL
          echo "Rollback done, previous version failed while deployed"

  # Job 2: Deploy-Prod (s√≥ roda se a condi√ß√£o do if bater)
  deploy-prod:
    # S√≥ executa se o job test der certo
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push' # s√≥ faz o deploy se for push(n√£o PR) na branch master
    environment:
      name: production
      url: https://e-commerce-api-ts.onrender.com

    steps:
      -  name: Deploy no Render
         env:
          RENDER_PROD_HOOK_URL: ${{ secrets.RENDER_PROD_HOOK_URL }}
         run: |
          echo "Deploying to PRODUCTION environment..."
          curl -X POST $RENDER_PROD_HOOK_URL
          echo "üöÄ Production deploy initiated"